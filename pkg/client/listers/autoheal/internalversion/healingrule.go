/*
Copyright (c) 2018 Red Hat, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

// This file was automatically generated by lister-gen

package internalversion

import (
	autoheal "github.com/openshift/autoheal/pkg/apis/autoheal"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HealingRuleLister helps list HealingRules.
type HealingRuleLister interface {
	// List lists all HealingRules in the indexer.
	List(selector labels.Selector) (ret []*autoheal.HealingRule, err error)
	// HealingRules returns an object that can list and get HealingRules.
	HealingRules(namespace string) HealingRuleNamespaceLister
	HealingRuleListerExpansion
}

// healingRuleLister implements the HealingRuleLister interface.
type healingRuleLister struct {
	indexer cache.Indexer
}

// NewHealingRuleLister returns a new HealingRuleLister.
func NewHealingRuleLister(indexer cache.Indexer) HealingRuleLister {
	return &healingRuleLister{indexer: indexer}
}

// List lists all HealingRules in the indexer.
func (s *healingRuleLister) List(selector labels.Selector) (ret []*autoheal.HealingRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*autoheal.HealingRule))
	})
	return ret, err
}

// HealingRules returns an object that can list and get HealingRules.
func (s *healingRuleLister) HealingRules(namespace string) HealingRuleNamespaceLister {
	return healingRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HealingRuleNamespaceLister helps list and get HealingRules.
type HealingRuleNamespaceLister interface {
	// List lists all HealingRules in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*autoheal.HealingRule, err error)
	// Get retrieves the HealingRule from the indexer for a given namespace and name.
	Get(name string) (*autoheal.HealingRule, error)
	HealingRuleNamespaceListerExpansion
}

// healingRuleNamespaceLister implements the HealingRuleNamespaceLister
// interface.
type healingRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HealingRules in the indexer for a given namespace.
func (s healingRuleNamespaceLister) List(selector labels.Selector) (ret []*autoheal.HealingRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*autoheal.HealingRule))
	})
	return ret, err
}

// Get retrieves the HealingRule from the indexer for a given namespace and name.
func (s healingRuleNamespaceLister) Get(name string) (*autoheal.HealingRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(autoheal.Resource("healingrule"), name)
	}
	return obj.(*autoheal.HealingRule), nil
}
